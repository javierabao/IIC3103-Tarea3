{"version":3,"sources":["lineChart.js","stocksTable.js","exchangesTable.js","exInfoTable.js","stInfoTable.js","App.js","serviceWorker.js","index.js"],"names":["drawLineChart","tickers","rows","data","GoogleCharts","api","visualization","DataTable","addColumn","Object","keys","forEach","stock","addRows","LineChart","document","getElementById","draw","title","titleTextStyle","color","fontSize","fontName","bold","italic","hAxis","format","gridlines","count","textStyle","vAxis","chartArea","backgroundColor","tooltip","legend","drawTable","stocks","dictVolTot","dictAltHis","dictBajHis","dictLastPrice","dictPorc","row","push","options","cssClassNames","headerRow","tableRow","oddTableRow","selectedTableRow","hoverTableRow","hoverHeaderRow","headerCell","tableCell","Table","drawExchangesTable","exchangesDict","dictVolCom","dictVolVen","dictVolTotEx","dictNumAcc","dictPart","exchange","drawExInfoTable","drawStInfoTable","stocksDict","stocksTimeline","lastRow","lastIndex","tableTickers","exchangeByStock","companies","exchanges","totalVol","App","useState","status","setStatus","statusButton","setStatusButton","socket","setSocket","onSetStatus","onSetStatusButton","onSetSocket","useEffect","socketIOClient","path","origins","transports","on","emit","excCom","company","length","join","concat","Date","timeline","indexOf","load","exc","excTot","style","textAlign","justifyContent","fontFamily","fontWeight","className","verticalAlign","onClick","close","send","marginBottom","id","borderRadius","marginLeft","marginRight","paddingTop","paddingBottom","alignItems","display","flexDirection","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c503be9.chunk.js","sourcesContent":["import { GoogleCharts } from 'google-charts';\n\nexport function drawLineChart(tickers, rows) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    data.addColumn('datetime', 'Time');\n\n    const stocks = Object.keys(tickers);\n\n    stocks.forEach((stock) => {\n        data.addColumn('number', stock);  \n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.LineChart(\n        document.getElementById('line_chart_div'),\n    );\n\n    const options = {\n        title: 'Acciones en el Tiempo',\n        titleTextStyle: {\n            color: '#f4511e',\n            fontSize: 28,\n            fontName: 'Raleway',\n            bold: true,\n            italic: false,\n        },\n        hAxis: {\n            title: 'Tiempo',\n            format: 'hh:mm:ss',\n            gridlines: {count: 15},\n            titleTextStyle: {\n                fontName: 'Lato',\n                bold: true,\n                italic: false,\n            },\n            textStyle: {\n                fontName: 'Lato',\n                bold: true,\n            },\n        },\n        vAxis: {\n        title: 'Precio',\n            titleTextStyle: {\n                fontName: 'Lato',\n                bold: true,\n                italic: false,\n            },\n            textStyle: {\n                fontName: 'Lato',\n                bold: true,\n            },\n        },\n        chartArea: {\n            backgroundColor: '#F0F1F2',\n        },\n        backgroundColor: '#F0F1F2',\n        tooltip: {\n            textStyle: {\n                fontName: 'Raleway',\n            }\n        },\n        legend: {\n            textStyle: {\n                fontName: 'Raleway',\n            }\n        }\n    };\n\n    chart.draw(data, options);\n\n}","import { GoogleCharts } from 'google-charts';\nimport './tables.css'\n\nexport function drawTable(stocks, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    \n    data.addColumn('string', 'Acción');\n    data.addColumn('number', 'Vol. Total');\n    data.addColumn('number', 'Alto Hist.');\n    data.addColumn('number', 'Bajo Hist.');\n    data.addColumn('number', 'Último valor');\n    data.addColumn('number', 'Cambio %');\n\n\n    let rows = []\n\n    stocks.forEach((stock) => {\n        let row = []\n        row.push(stock)\n        row.push(dictVolTot[stock] ? dictVolTot[stock] : null) \n        row.push(dictAltHis[stock] ? dictAltHis[stock] : null) \n        row.push(dictBajHis[stock] ? dictBajHis[stock] : null) \n        row.push(dictLastPrice[stock] ? dictLastPrice[stock] : null) \n        row.push(dictPorc[stock] ? dictPorc[stock] : null) \n        rows.push(row)\n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.Table(\n        document.getElementById('stocks_table_div'),\n    );\n\n    const cssClassNames = {\n        headerRow: 'cssHeaderRow',\n        tableRow: 'cssTableRow',\n        oddTableRow: 'cssOddTableRow',\n        selectedTableRow: 'cssSelectedTableRow',\n        hoverTableRow: 'cssHoverTableRow',\n        hoverHeaderRow: 'cssHoverHeaderRow',\n        headerCell: 'cssHeaderCell',\n        tableCell: 'cssTableCell',\n    };\n\n    const options = {\n        title: 'Acciones y sus parámetros',\n        cssClassNames,\n    };\n\n    chart.draw(data, options);\n\n}","import { GoogleCharts } from 'google-charts';\nimport './tables.css'\n\nexport function drawExchangesTable(exchangesDict, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    \n    data.addColumn('string', 'Mercado');\n    data.addColumn('number', 'Vol. Compra');\n    data.addColumn('number', 'Vol. Venta');\n    data.addColumn('number', 'Vol. Total');\n    data.addColumn('number', 'Num. acciones');\n    data.addColumn('number', '% Participación');\n\n\n    let rows = []\n\n    const exchanges = Object.keys(exchangesDict);\n\n    exchanges.forEach((exchange) => {\n        let row = []\n        row.push(exchange)\n        row.push(dictVolCom[exchange] ? dictVolCom[exchange] : null) \n        row.push(dictVolVen[exchange] ? dictVolVen[exchange] : null) \n        row.push(dictVolTotEx[exchange] ? dictVolTotEx[exchange] : null) \n        row.push(dictNumAcc[exchange] ? dictNumAcc[exchange] : null) \n        row.push(dictPart[exchange] ? dictPart[exchange] : null) \n        rows.push(row)\n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.Table(\n        document.getElementById('exchanges_table_div'),\n    );\n\n    const cssClassNames = {\n        headerRow: 'cssHeaderRow',\n        tableRow: 'cssTableRow',\n        oddTableRow: 'cssOddTableRow',\n        selectedTableRow: 'cssSelectedTableRow',\n        hoverTableRow: 'cssHoverTableRow',\n        hoverHeaderRow: 'cssHoverHeaderRow',\n        headerCell: 'cssHeaderCell',\n        tableCell: 'cssTableCell',\n    };\n\n    const options = {\n        title: 'Exchanges y sus parámetros',\n        cssClassNames,\n    };\n\n    chart.draw(data, options);\n\n}","import { GoogleCharts } from 'google-charts';\nimport './tables.css'\n\nexport function drawExInfoTable(exchangesDict) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    \n    data.addColumn('string', 'Ticker');\n    data.addColumn('string', 'Nombre');\n    data.addColumn('string', 'País');\n    data.addColumn('string', 'Dirección');\n    data.addColumn('string', 'Empresas');\n\n\n    let rows = []\n\n    const exchanges = Object.keys(exchangesDict);\n\n    exchanges.forEach((exchange) => {\n        let row = []\n        row.push(exchange)\n        row.push(exchangesDict[exchange][0]) \n        row.push(exchangesDict[exchange][1]) \n        row.push(exchangesDict[exchange][2]) \n        row.push(exchangesDict[exchange][3]) \n        rows.push(row)\n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.Table(\n        document.getElementById('ex_info_table_div'),\n    );\n\n    const cssClassNames = {\n        headerRow: 'cssInfoHeaderRow',\n        tableRow: 'cssTableRow',\n        oddTableRow: 'cssOddTableRow',\n        selectedTableRow: 'cssSelectedTableRow',\n        hoverTableRow: 'cssHoverTableRow',\n        hoverHeaderRow: 'cssHoverHeaderRow',\n        headerCell: 'cssHeaderCell',\n        tableCell: 'cssTableCell',\n    };\n\n    const options = {\n        title: 'Exchanges Information',\n        cssClassNames,\n    };\n\n    chart.draw(data, options);\n\n}","import { GoogleCharts } from 'google-charts';\nimport './tables.css'\n\nexport function drawStInfoTable(stocksDict) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    \n    data.addColumn('string', 'Ticker');\n    data.addColumn('string', 'Empresa');\n    data.addColumn('string', 'País');\n    data.addColumn('string', 'Moneda');\n\n    let rows = []\n\n    const stocks = Object.keys(stocksDict);\n\n    stocks.forEach((stock) => {\n        let row = []\n        row.push(stocksDict[stock][0]) \n        row.push(stock)\n        row.push(stocksDict[stock][1]) \n        row.push(stocksDict[stock][2]) \n        rows.push(row)\n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.Table(\n        document.getElementById('st_info_table_div'),\n    );\n\n    const cssClassNames = {\n        headerRow: 'cssInfoHeaderRow',\n        tableRow: 'cssTableRow',\n        oddTableRow: 'cssOddTableRow',\n        selectedTableRow: 'cssSelectedTableRow',\n        hoverTableRow: 'cssHoverTableRow',\n        hoverHeaderRow: 'cssHoverHeaderRow',\n        headerCell: 'cssHeaderCell',\n        tableCell: 'cssTableCell',\n    };\n\n    const options = {\n        title: 'Stocks y sus empresas',\n        cssClassNames,\n    };\n\n    chart.draw(data, options);\n\n}","import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { GoogleCharts } from 'google-charts';\nimport { drawLineChart } from \"./lineChart\"\nimport { drawTable} from \"./stocksTable\"\nimport { drawExchangesTable} from \"./exchangesTable\"\nimport { drawExInfoTable} from \"./exInfoTable\"\nimport { drawStInfoTable} from \"./stInfoTable\"\nimport './App.css';\n\n\nvar stocksTimeline = [];\nvar tickers = {};\nvar lastRow = [0];\nvar lastIndex = 1;\n\nvar tableTickers = []\nvar dictVolTot = {}\nvar dictAltHis = {}\nvar dictBajHis = {}\nvar dictLastPrice = {}\nvar dictPorc = {}\n\nvar exchangeByStock = {} // stock: exchange1, stock2: exchange2\nvar companies = {} // company_name: [ticker, country, quote_base]\nvar exchanges = {} // same info that server\n\nvar totalVol = 0;\n\nvar dictVolCom = {}\nvar dictVolVen = {}\nvar dictVolTotEx = {}\nvar dictNumAcc = {}\nvar dictPart = {}\n\n\nfunction App() {\n  const [status, setStatus] = useState(\"\");\n  const [statusButton, setStatusButton] = useState(\"\");\n  const [socket, setSocket] = useState(\"\");\n\n  const onSetStatus = (status) => {\n    setStatus( status )\n  }\n\n  const onSetStatusButton = (statusButton) => {\n    setStatusButton( statusButton )\n  }\n\n  const onSetSocket = (socket) => {\n    setSocket( socket )\n  }\n\n  const send = () => {\n    if (status === 'Disconnected') {\n      const socket = socketIOClient('wss://le-18262636.bitzonte.com', {path: '/stocks', origins: '*:*', transports: ['websocket']});\n      onSetSocket(socket);\n\n      socket.on(\"connect\", () => {\n        onSetStatus('Connected');\n        onSetStatusButton('Disconnect');\n      });\n    \n      socket.emit(\"STOCKS\")\n      socket.on(\"STOCKS\", (data) => {\n        data.forEach((stock) => {\n          companies[stock[\"company_name\"]] = [stock[\"ticker\"], stock[\"country\"], stock[\"quote_base\"]]\n        })\n      })\n\n      socket.emit(\"EXCHANGES\")\n      socket.on(\"EXCHANGES\", (data) => {\n        Object.keys(data).forEach((exchange) => {\n          let excCom = []\n          exchanges[exchange] = [data[exchange][\"name\"], data[exchange][\"country\"], data[exchange][\"address\"]]\n          data[exchange][\"listed_companies\"].forEach((company) => {\n            exchangeByStock[companies[company][0]] = exchange;\n            excCom.push(company)\n          })\n          dictNumAcc[exchange] = data[exchange][\"listed_companies\"].length;\n          exchanges[exchange].push(excCom.join(\", \"))\n        })\n      })\n      \n      socket.on(\"UPDATE\", (data) => {\n        if (data[\"ticker\"] in tickers) {\n          let row = [].concat(lastRow);\n          row[0] = new Date(data[\"time\"])\n          row[tickers[data[\"ticker\"]]] = data[\"value\"]\n          stocksTimeline.push(row)\n          lastRow = [].concat(row);\n        } else {\n          stocksTimeline.forEach((timeline) => {\n            timeline.push(0)\n          })\n          tickers[data[\"ticker\"]] = lastIndex\n          lastIndex++;\n          let row = [].concat(lastRow);\n          row[0] = new Date(data[\"time\"])\n          row.push(data[\"value\"])\n          stocksTimeline.push(row)\n          lastRow = [].concat(row);\n        }\n        dictAltHis[data[\"ticker\"]] = dictAltHis[data[\"ticker\"]] ? (data[\"value\"] > dictAltHis[data[\"ticker\"]] ? data[\"value\"] : dictAltHis[data[\"ticker\"]]) : data[\"value\"];\n        dictBajHis[data[\"ticker\"]] = dictBajHis[data[\"ticker\"]] ? (data[\"value\"] < dictBajHis[data[\"ticker\"]] ? data[\"value\"] : dictBajHis[data[\"ticker\"]]) : data[\"value\"];\n        dictPorc[data[\"ticker\"]] = data[\"ticker\"] in dictLastPrice ? ((data[\"value\"] / dictLastPrice[data[\"ticker\"]]) - 1) * 100 : 0;\n        dictLastPrice[data[\"ticker\"]] = data[\"value\"]\n\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n          drawStInfoTable(companies)\n          drawExInfoTable(exchanges)\n        });\n      });\n      socket.on(\"BUY\", (data) => {\n        // table 1\n        dictVolTot[data[\"ticker\"]] = (dictVolTot[data[\"ticker\"]] || 0) + data[\"volume\"];\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n\n        // table 2\n        let exc = exchangeByStock[data[\"ticker\"]];\n        dictVolCom[exc] = (dictVolCom[exc] || 0) + data[\"volume\"];\n        dictVolTotEx[exc] = (dictVolTotEx[exc] || 0) + data[\"volume\"];\n        totalVol += data[\"volume\"];\n\n        Object.keys(dictVolTotEx).forEach((excTot) => {\n          dictPart[excTot] = dictVolTotEx[excTot] / totalVol;\n        })\n\n        // chart\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n          drawStInfoTable(companies)\n          drawExInfoTable(exchanges)\n\n        });\n      });\n      socket.on(\"SELL\", (data) => {\n        // table 1\n        dictVolTot[data[\"ticker\"]] = (dictVolTot[data[\"ticker\"]] || 0) + data[\"volume\"];\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n\n        // table 2\n        let exc = exchangeByStock[data[\"ticker\"]];\n        dictVolVen[exc] = (dictVolVen[exc] || 0) + data[\"volume\"]\n        dictVolTotEx[exc] = (dictVolTotEx[exc] || 0) + data[\"volume\"];\n        totalVol += data[\"volume\"];\n\n        Object.keys(dictVolTotEx).forEach((excTot) => {\n          dictPart[excTot] = dictVolTotEx[excTot] / totalVol;\n        })\n\n        // chart\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n          drawStInfoTable(companies)\n          drawExInfoTable(exchanges)\n        });\n      });\n      \n\n    } else {\n      socket.close();\n      onSetStatus('Disconnected');\n      onSetStatusButton('Connect');\n    }\n  }\n\n  useEffect(() => {\n    const socket = socketIOClient('wss://le-18262636.bitzonte.com', {path: '/stocks', origins: '*:*', transports: ['websocket']});\n      onSetSocket(socket);\n\n      socket.on(\"connect\", () => {\n        onSetStatus('Connected');\n        onSetStatusButton('Disconnect');\n      });\n    \n      socket.emit(\"STOCKS\")\n      socket.on(\"STOCKS\", (data) => {\n        data.forEach((stock) => {\n          companies[stock[\"company_name\"]] = [stock[\"ticker\"], stock[\"country\"], stock[\"quote_base\"]]\n        })\n      })\n\n      socket.emit(\"EXCHANGES\")\n      socket.on(\"EXCHANGES\", (data) => {\n        Object.keys(data).forEach((exchange) => {\n          let excCom = []\n          exchanges[exchange] = [data[exchange][\"name\"], data[exchange][\"country\"], data[exchange][\"address\"]]\n          data[exchange][\"listed_companies\"].forEach((company) => {\n            exchangeByStock[companies[company][0]] = exchange;\n            excCom.push(company)\n          })\n          dictNumAcc[exchange] = data[exchange][\"listed_companies\"].length;\n          exchanges[exchange].push(excCom.join(\", \"))\n        })\n      })\n      \n      socket.on(\"UPDATE\", (data) => {\n        if (data[\"ticker\"] in tickers) {\n          let row = [].concat(lastRow);\n          row[0] = new Date(data[\"time\"])\n          row[tickers[data[\"ticker\"]]] = data[\"value\"]\n          stocksTimeline.push(row)\n          lastRow = [].concat(row);\n        } else {\n          stocksTimeline.forEach((timeline) => {\n            timeline.push(0)\n          })\n          tickers[data[\"ticker\"]] = lastIndex\n          lastIndex++;\n          let row = [].concat(lastRow);\n          row[0] = new Date(data[\"time\"])\n          row.push(data[\"value\"])\n          stocksTimeline.push(row)\n          lastRow = [].concat(row);\n        }\n        dictAltHis[data[\"ticker\"]] = dictAltHis[data[\"ticker\"]] ? (data[\"value\"] > dictAltHis[data[\"ticker\"]] ? data[\"value\"] : dictAltHis[data[\"ticker\"]]) : data[\"value\"];\n        dictBajHis[data[\"ticker\"]] = dictBajHis[data[\"ticker\"]] ? (data[\"value\"] < dictBajHis[data[\"ticker\"]] ? data[\"value\"] : dictBajHis[data[\"ticker\"]]) : data[\"value\"];\n        dictPorc[data[\"ticker\"]] = data[\"ticker\"] in dictLastPrice ? ((data[\"value\"] / dictLastPrice[data[\"ticker\"]]) - 1) * 100 : 0;\n        dictLastPrice[data[\"ticker\"]] = data[\"value\"]\n\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n          drawStInfoTable(companies)\n          drawExInfoTable(exchanges)\n        });\n      });\n      socket.on(\"BUY\", (data) => {\n        // table 1\n        dictVolTot[data[\"ticker\"]] = (dictVolTot[data[\"ticker\"]] || 0) + data[\"volume\"];\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n\n        // table 2\n        let exc = exchangeByStock[data[\"ticker\"]];\n        dictVolCom[exc] = (dictVolCom[exc] || 0) + data[\"volume\"];\n        dictVolTotEx[exc] = (dictVolTotEx[exc] || 0) + data[\"volume\"];\n        totalVol += data[\"volume\"];\n\n        Object.keys(dictVolTotEx).forEach((excTot) => {\n          dictPart[excTot] = dictVolTotEx[excTot] / totalVol;\n        })\n\n        // chart\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n          drawStInfoTable(companies)\n          drawExInfoTable(exchanges)\n\n        });\n      });\n      socket.on(\"SELL\", (data) => {\n        // table 1\n        dictVolTot[data[\"ticker\"]] = (dictVolTot[data[\"ticker\"]] || 0) + data[\"volume\"];\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n\n        // table 2\n        let exc = exchangeByStock[data[\"ticker\"]];\n        dictVolVen[exc] = (dictVolVen[exc] || 0) + data[\"volume\"]\n        dictVolTotEx[exc] = (dictVolTotEx[exc] || 0) + data[\"volume\"];\n        totalVol += data[\"volume\"];\n\n        Object.keys(dictVolTotEx).forEach((excTot) => {\n          dictPart[excTot] = dictVolTotEx[excTot] / totalVol;\n        })\n\n        // chart\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n          drawStInfoTable(companies)\n          drawExInfoTable(exchanges)\n        });\n      });\n  }, [])\n\n\n\n  return (\n    <div>\n      <div style={{textAlign: \"center\", justifyContent: \"center\"}}>\n        <div style={{ textAlign: \"center\", fontFamily: \"Raleway\", fontSize: \"40px\", fontWeight: \"bold\" }}>Mercado Financiero</div>\n        <button className=\"button\" style={{verticalAlign: \"middle\"}} onClick={() => send() }>{statusButton}</button>\n        <div style={{marginBottom: \"2%\"}}> {status} </div>\n      </div>\n      <div style={{ textAlign: \"center\" }}>\n        <div id=\"line_chart_div\" style={{backgroundColor: \"#F0F1F2\", borderRadius: \"4px\", marginLeft: \"10%\", marginRight: \"10%\", marginBottom: \"2%\", paddingTop: \"20px\", paddingBottom: \"20px\"}}> \n        </div>\n      </div>\n      <div style={{ textAlign: \"center\", alignItems: \"center\", justifyContent: \"space-between\", display: \"flex\", flexDirection: \"row\", marginLeft: \"10%\", marginRight: \"10%\", marginBottom: \"2%\"}}>\n        <div style={{backgroundColor: \"#F0F1F2\", borderRadius: \"4px\", padding: \"20px\"}}> \n          <div style={{fontFamily: \"Raleway\", fontSize: \"30px\", fontWeight: \"bold\" }}>Cambios en acciones</div>\n          <div id=\"stocks_table_div\"></div>\n        </div>\n        <div style={{backgroundColor: \"#F0F1F2\", borderRadius: \"4px\", padding: \"20px\"}}>\n          <div style={{fontFamily: \"Raleway\", fontSize: \"30px\", fontWeight: \"bold\" }}>Cambios en mercados</div> \n          <div id=\"exchanges_table_div\"></div>\n        </div>\n      </div>\n      <div style={{textAlign: \"center\", justifyContent: \"center\", backgroundColor: \"#F0F1F2\", padding: \"20px\", borderRadius: \"4px\", marginLeft: \"10%\", marginRight: \"10%\", marginBottom: \"2%\"}}>\n        <div style={{fontFamily: \"Raleway\", fontSize: \"30px\", fontWeight: \"bold\" }}>Información de acciones</div> \n        <div id=\"st_info_table_div\"> </div>\n      </div>\n      <div style={{textAlign: \"center\", justifyContent: \"center\", backgroundColor: \"#F0F1F2\", padding: \"20px\", borderRadius: \"4px\", marginLeft: \"10%\", marginRight: \"10%\", marginBottom: \"2%\"}}>\n        <div style={{fontFamily: \"Raleway\", fontSize: \"30px\", fontWeight: \"bold\" }}>Información de mercados</div> \n        <div id=\"ex_info_table_div\"> </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}