{"version":3,"sources":["lineChart.js","stocksTable.js","exchangesTable.js","App.js","serviceWorker.js","index.js"],"names":["drawLineChart","tickers","rows","data","GoogleCharts","api","visualization","DataTable","addColumn","Object","keys","forEach","stock","addRows","LineChart","document","getElementById","draw","title","hAxis","format","gridlines","count","drawTable","stocks","dictVolTot","dictAltHis","dictBajHis","dictLastPrice","dictPorc","row","push","Table","drawExchangesTable","exchangesDict","dictVolCom","dictVolVen","dictVolTotEx","dictNumAcc","dictPart","exchange","stocksTimeline","lastRow","lastIndex","tableTickers","exchangeByStock","companies","exchanges","totalVol","App","useState","status","setStatus","statusButton","setStatusButton","socket","setSocket","onSetStatus","onSetStatusButton","send","socketIOClient","path","origins","transports","onSetSocket","emit","on","company","length","concat","Date","timeline","indexOf","load","exc","excTot","close","useEffect","style","textAlign","onClick","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7c9d2d3.chunk.js","sourcesContent":["import { GoogleCharts } from 'google-charts';\n\nexport function drawLineChart(tickers, rows) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    data.addColumn('datetime', 'Time');\n\n    const stocks = Object.keys(tickers);\n\n    stocks.forEach((stock) => {\n        data.addColumn('number', stock);  \n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.LineChart(\n        document.getElementById('line_chart_div'),\n    );\n\n    const options = {\n        title: 'Acciones en el Tiempo',\n        hAxis: {\n            format: 'hh:mm:ss',\n            gridlines: {count: 15}\n        },\n    };\n\n    chart.draw(data, options);\n\n}","import { GoogleCharts } from 'google-charts';\n\nexport function drawTable(stocks, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    \n    data.addColumn('string', 'Stock');\n    data.addColumn('number', 'Vol. Total');\n    data.addColumn('number', 'Alto historico');\n    data.addColumn('number', 'Bajo historico');\n    data.addColumn('number', 'Ult precio');\n    data.addColumn('number', 'Cambio %');\n\n\n    let rows = []\n\n    stocks.forEach((stock) => {\n        let row = []\n        row.push(stock)\n        row.push(dictVolTot[stock] ? dictVolTot[stock] : null) \n        row.push(dictAltHis[stock] ? dictAltHis[stock] : null) \n        row.push(dictBajHis[stock] ? dictBajHis[stock] : null) \n        row.push(dictLastPrice[stock] ? dictLastPrice[stock] : null) \n        row.push(dictPorc[stock] ? dictPorc[stock] : null) \n        rows.push(row)\n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.Table(\n        document.getElementById('stocks_table_div'),\n    );\n\n    const options = {\n        title: 'Acciones y sus parámetros',\n    };\n\n    chart.draw(data, options);\n\n}","import { GoogleCharts } from 'google-charts';\n\nexport function drawExchangesTable(exchangesDict, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart) {\n    const data = new GoogleCharts.api.visualization.DataTable();\n    \n    data.addColumn('string', 'Exchange');\n    data.addColumn('number', 'Vol. Compra');\n    data.addColumn('number', 'Vol. Venta');\n    data.addColumn('number', 'Vol. Total');\n    data.addColumn('number', 'Num acciones');\n    data.addColumn('number', '% Participacion');\n\n\n    let rows = []\n\n    const exchanges = Object.keys(exchangesDict);\n\n    exchanges.forEach((exchange) => {\n        let row = []\n        row.push(exchange)\n        row.push(dictVolCom[exchange] ? dictVolCom[exchange] : null) \n        row.push(dictVolVen[exchange] ? dictVolVen[exchange] : null) \n        row.push(dictVolTotEx[exchange] ? dictVolTotEx[exchange] : null) \n        row.push(dictNumAcc[exchange] ? dictNumAcc[exchange] : null) \n        row.push(dictPart[exchange] ? dictPart[exchange] : null) \n        rows.push(row)\n    })\n\n    data.addRows(rows);\n\n    const chart = new GoogleCharts.api.visualization.Table(\n        document.getElementById('exchanges_table_div'),\n    );\n\n    const options = {\n        title: 'Exchanges y sus parámetros',\n    };\n\n    chart.draw(data, options);\n\n}","import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { GoogleCharts } from 'google-charts';\nimport { drawLineChart } from \"./lineChart\"\nimport { drawTable} from \"./stocksTable\"\nimport { drawExchangesTable} from \"./exchangesTable\"\n\nvar stocksTimeline = [];\nvar tickers = {};\nvar lastRow = [0];\nvar lastIndex = 1;\n\nvar tableTickers = []\nvar dictVolTot = {}\nvar dictAltHis = {}\nvar dictBajHis = {}\nvar dictLastPrice = {}\nvar dictPorc = {}\n\nvar exchangeByStock = {} // stock: exchange1, stock2: exchange2\nvar companies = {} // company_name: [ticker, country, quote_base]\nvar exchanges = {} // same info that server\n\nvar totalVol = 0;\n\nvar dictVolCom = {}\nvar dictVolVen = {}\nvar dictVolTotEx = {}\nvar dictNumAcc = {}\nvar dictPart = {}\n\n\nfunction App() {\n  const [status, setStatus] = useState(\"\");\n  const [statusButton, setStatusButton] = useState(\"\");\n  const [socket, setSocket] = useState(\"\");\n\n  const onSetStatus = (status) => {\n    setStatus( status )\n  }\n\n  const onSetStatusButton = (statusButton) => {\n    setStatusButton( statusButton )\n  }\n\n  const onSetSocket = (socket) => {\n    setSocket( socket )\n  }\n\n  const send = () => {\n    if (status === 'Disconnected') {\n      const socket = socketIOClient('wss://le-18262636.bitzonte.com', {path: '/stocks', origins: '*:*', transports: ['websocket']});\n      onSetSocket(socket);\n    \n      socket.emit(\"STOCKS\")\n      socket.on(\"STOCKS\", (data) => {\n        data.forEach((stock) => {\n          companies[stock[\"company_name\"]] = [stock[\"ticker\"], stock[\"country\"], stock[\"quote_based\"]]\n        })\n      })\n\n      socket.emit(\"EXCHANGES\")\n      socket.on(\"EXCHANGES\", (data) => {\n        Object.keys(data).forEach((exchange) => {\n          exchanges[exchange] = [data[exchange][\"name\"], data[exchange][\"country\"], data[exchange][\"address\"]]\n          data[exchange][\"listed_companies\"].forEach((company) => {\n            exchangeByStock[companies[company][0]] = exchange;\n          })\n          dictNumAcc[exchange] = data[exchange][\"listed_companies\"].length;\n        })\n      })\n\n      socket.on(\"connect\", () => {\n        onSetStatus('Connected');\n        onSetStatusButton('Disconnect');\n      });\n      socket.on(\"UPDATE\", (data) => {\n        if (data[\"ticker\"] in tickers) {\n          let row = [].concat(lastRow);\n          row[0] = new Date(data[\"time\"])\n          row[tickers[data[\"ticker\"]]] = data[\"value\"]\n          stocksTimeline.push(row)\n          lastRow = [].concat(row);\n        } else {\n          stocksTimeline.forEach((timeline) => {\n            timeline.push(0)\n          })\n          tickers[data[\"ticker\"]] = lastIndex\n          lastIndex++;\n          let row = [].concat(lastRow);\n          row[0] = new Date(data[\"time\"])\n          row.push(data[\"value\"])\n          stocksTimeline.push(row)\n          lastRow = [].concat(row);\n        }\n        dictAltHis[data[\"ticker\"]] = dictAltHis[data[\"ticker\"]] ? (data[\"value\"] > dictAltHis[data[\"ticker\"]] ? data[\"value\"] : dictAltHis[data[\"ticker\"]]) : data[\"value\"];\n        dictBajHis[data[\"ticker\"]] = dictBajHis[data[\"ticker\"]] ? (data[\"value\"] < dictBajHis[data[\"ticker\"]] ? data[\"value\"] : dictBajHis[data[\"ticker\"]]) : data[\"value\"];\n        dictPorc[data[\"ticker\"]] = data[\"ticker\"] in dictLastPrice ? ((data[\"value\"] / dictLastPrice[data[\"ticker\"]]) - 1) * 100 : 0;\n        dictLastPrice[data[\"ticker\"]] = data[\"value\"]\n\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n        });\n      });\n      socket.on(\"BUY\", (data) => {\n        // table 1\n        dictVolTot[data[\"ticker\"]] = (dictVolTot[data[\"ticker\"]] || 0) + data[\"volume\"];\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n\n        // table 2\n        let exc = exchangeByStock[data[\"ticker\"]];\n        dictVolCom[exc] = (dictVolCom[exc] || 0) + data[\"volume\"];\n        dictVolTotEx[exc] = (dictVolTotEx[exc] || 0) + data[\"volume\"];\n        totalVol += data[\"volume\"];\n\n        Object.keys(dictVolTotEx).forEach((excTot) => {\n          dictPart[excTot] = dictVolTotEx[excTot] / totalVol;\n        })\n\n        // chart\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n        });\n      });\n      socket.on(\"SELL\", (data) => {\n        // table 1\n        dictVolTot[data[\"ticker\"]] = (dictVolTot[data[\"ticker\"]] || 0) + data[\"volume\"];\n        if(tableTickers.indexOf(data[\"ticker\"]) === -1) {\n          tableTickers.push(data[\"ticker\"]);\n        }\n\n        // table 2\n        let exc = exchangeByStock[data[\"ticker\"]];\n        dictVolVen[exc] = (dictVolVen[exc] || 0) + data[\"volume\"]\n        dictVolTotEx[exc] = (dictVolTotEx[exc] || 0) + data[\"volume\"];\n        totalVol += data[\"volume\"];\n\n        Object.keys(dictVolTotEx).forEach((excTot) => {\n          dictPart[excTot] = dictVolTotEx[excTot] / totalVol;\n        })\n\n        // chart\n        GoogleCharts.load(() => {\n          drawLineChart(tickers, stocksTimeline)\n          drawTable(tableTickers, dictVolTot, dictAltHis, dictBajHis, dictLastPrice, dictPorc)\n          drawExchangesTable(exchanges, dictVolCom, dictVolVen, dictVolTotEx, dictNumAcc, dictPart)\n        });\n      });\n      \n\n    } else {\n      socket.close();\n      onSetStatus('Disconnected');\n      onSetStatusButton('Connect');\n    }\n  }\n\n  useEffect(() => {\n    onSetStatus('Disconnected');\n    onSetStatusButton('Connect');\n  }, [])\n\n\n\n  return (\n    <div>\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => send() }>{statusButton}</button>\n        <p> {status} </p>\n      </div>\n      <div style={{ textAlign: \"center\" }}>\n        <div id=\"line_chart_div\"> </div>\n        <div id=\"stocks_table_div\"> </div>\n        <div id=\"exchanges_table_div\"> </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}